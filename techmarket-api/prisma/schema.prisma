// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id           Int       @id @default(autoincrement())
  name         String
  category     String
  description  String?
  price        Float
  stockCount   Int       @default(0) @map("stock_count")
  brand        String?
  imageUrl     String?   @map("image_url")
  isAvailable  Boolean   @default(true) @map("is_available")
  createdAt    DateTime  @default(now()) @map("created_at")
  categoryId   Int?      @map("category_id")
  reviews      Review[]
  cartItems    CartItem[]
  Category     Category? @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]

  @@map("categories")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  email        String    @unique
  passwordHash String    @map("password_hash")
  firstName    String?   @map("first_name")
  lastName     String?   @map("last_name")
  createdAt    DateTime  @default(now()) @map("created_at")
  reviews      Review[]
  cartItems    CartItem[]

  @@map("users")
}

model Review {
  id        Int       @id @default(autoincrement())
  productId Int       @map("product_id")
  userId    Int       @map("user_id")
  rating    Int
  comment   String?
  createdAt DateTime  @default(now()) @map("created_at")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model CartItem {
  id        Int       @id @default(autoincrement())
  userId    Int       @map("user_id")
  productId Int       @map("product_id")
  quantity  Int       @default(1)
  addedAt   DateTime  @default(now()) @map("added_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}
